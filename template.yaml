AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Knowledge Base Chat Application'

Parameters:
  AmplifyAppName:
    Type: String
    Default: bedrock-kb-chat
    Description: Name for the Amplify application
  
  GitHubRepo:
    Type: String
    Description: GitHub repository URL (e.g., username/repo)
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token for accessing the repository
    
  LambdaCodeBucket:
    Type: String
    Description: S3 Bucket containing Lambda code

Resources:
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock-agent:RetrieveAndGenerate
                  - bedrock-agent:Retrieve
                  - bedrock-agent:ListKnowledgeBases
                  - bedrock-agent:ListDataSources
                Resource: '*'

  # Lambda Function
  BedrockChatFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-kb-chat
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda-function.zip

  # API Gateway
  ChatAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BedrockKBChatAPI
      Description: API for Bedrock Knowledge Base Chat

  # API Resources
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatAPI
      ParentId: !GetAtt ChatAPI.RootResourceId
      PathPart: 'api'
  
  ChatEndpoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatAPI
      ParentId: !Ref ChatResource
      PathPart: 'chat'
  
  KnowledgeBasesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatAPI
      ParentId: !Ref ChatResource
      PathPart: 'knowledge-bases'

  # API Methods
  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatAPI
      ResourceId: !Ref ChatEndpoint
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockChatFunction.Arn}/invocations
  
  KnowledgeBasesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatAPI
      ResourceId: !Ref KnowledgeBasesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockChatFunction.Arn}/invocations
  
  # CORS for Chat endpoint
  ChatCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatAPI
      ResourceId: !Ref ChatEndpoint
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # CORS for KnowledgeBases endpoint
  KnowledgeBasesCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatAPI
      ResourceId: !Ref KnowledgeBasesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatMethod
      - ChatCorsMethod
      - KnowledgeBasesMethod
      - KnowledgeBasesCorsMethod
    Properties:
      RestApiId: !Ref ChatAPI
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BedrockChatFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatAPI}/*

  # Amplify App
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Ref AmplifyAppName
      Repository: !Ref GitHubRepo
      AccessToken: !Ref GitHubToken
      BuildSpec: |
        version: 1
        frontend:
          phases:
            preBuild:
              commands:
                - npm install
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
          cache:
            paths:
              - node_modules/**/*
      EnvironmentVariables:
        - Name: REACT_APP_API_ENDPOINT
          Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod

  # Amplify Branch
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ChatAPI}.execute-api.${AWS::Region}.amazonaws.com/prod
  
  AmplifyAppUrl:
    Description: URL of the Amplify app
    Value: !Sub https://main.${AmplifyApp.DefaultDomain}
